/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <29>; };

&left_encoder {
    compatible = "alps,ec11";
    steps = <90>;
};

&right_encoder {
    compatible = "alps,ec11";
    steps = <90>;
};

&sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&left_encoder &right_encoder>;
    triggers-per-rotation = <24>;
};

/ {
    behaviors {
        rgb_brightness: rgb_brightness {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "RGB_BRIGHTNESS";
            #sensor-binding-cells = <2>;
            bindings = <&none>, <&none>;
        };

         lt_backspace: lt_backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BACKSPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
        };

        ea_m: ea_m {
            compatible = "zmk,behavior-mod-morph";
            label = "EA_M";
            bindings = <&ae>, <&AE_>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        oe_m: oe_m {
            compatible = "zmk,behavior-mod-morph";
            label = "OE_M";
            bindings = <&oe>, <&OE_>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        aa_m: aa_m {
            compatible = "zmk,behavior-mod-morph";
            label = "AA_M";
            bindings = <&aa>, <&AA_>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        change_win: change_win {
            compatible = "zmk,behavior-sensor-rotate";
            label = "CHANGE_WIN";
            #sensor-binding-cells = <0>;
            bindings = <&prev_win>, <&next_win>;
        };

        L1_dance: L1_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "L1_DANCE";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&RGB_layer 1 RGB_COLOR_HSB_VAL(222,94,48)>;
        };

        L2_dance: L2_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "L2_DANCE";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&RGB_layer 2 RGB_COLOR_HSB_VAL(312,94,48)>;
        };

        shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        shift_ctrl_dance: shift_ctrl_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CTRL_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LC(LEFT_SHIFT)>;
        };

        enter_ctrl_dance: enter_ctrl_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ENTER_CTRL_DANCE";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp LCTRL>;
        };
    };

    macros {

        DK_QMARK: DK_QMARK {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt UNDERSCORE>;
            label = "DK_QMARK";
        };

        DK_APOS: DK_APOS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUHS>;
            label = "DK_APOS";
        };

        DK_LESS: DK_LESS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUBS>;
            label = "DK_LESS";
        };

        DK_GREATER: DK_GREATER {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LS(NUBS)>;
            label = "DK_GREATER";
        };

        DK_PIPE: DK_PIPE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(EQUAL)>;
            label = "DK_PIPE";
        };

        ae: ae {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_5>,
                <&macro_release>,
                <&kp RIGHT_ALT>;

            label = "AE";
            tap-ms = <1>;
            wait-ms = <0>;
        };

        AE_: AE_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_N4 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp RIGHT_ALT>;

            label = "AE_";
            tap-ms = <1>;
        };

        oe: oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_N4 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp RIGHT_ALT>;

            label = "OE";
            tap-ms = <1>;
        };

        OE_: OE_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_1 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp RIGHT_ALT>;

            label = "OE_";
            tap-ms = <1>;
        };

        aa: aa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_NUMBER_4>,
                <&macro_release>,
                <&kp RIGHT_ALT>;

            label = "AA";
            tap-ms = <1>;
            wait-ms = <0>;
        };

        AA_: AA_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp RIGHT_ALT>;

            label = "AA_";
            tap-ms = <1>;
            wait-ms = <0>;
        };


        next_win: next_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NEXT_WIN";
            wait-ms = <1000>;
        };

        prev_win: prev_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp LS(TAB)>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "PREV_WIN";
            wait-ms = <1000>;
        };

        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        hold_layer: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        RGB_layer: RGB_layer {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&rgb_ug RGB_ON &macro_param_1to1 &to MACRO_PLACEHOLDER>,
                <&macro_wait_time 100>,
                <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>;

            label = "RGB_LAYER";
        };

        base_layer: base_layer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_OFF &to 0>;
            label = "BASE_LAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC         &kp N1      &kp N2      &kp N3        &kp N4            &kp N5                                           &kp N6                     &kp N7       &kp N8         &kp N9          &kp N0              &DK_APOS
&kp TAB         &kp Q       &kp W       &kp E         &kp R             &kp T                                            &kp Y                      &kp U        &kp I          &kp O           &kp P               &kp LEFT_BRACKET
&kp LEFT_SHIFT  &mt LGUI A  &mt LALT S  &mt LCTRL D   &mt LEFT_SHIFT F  &kp G                                            &kp H                      &mt RSHFT J  &mt RCTRL K    &mt LEFT_ALT L  &mt RIGHT_GUI SEMI  &kp APOS
&kp LCTRL       &kp Z       &kp X       &kp C         &kp V             &kp B      &kp C_MUTE    &mt LC(N0) PRINTSCREEN  &kp N                      &kp M        &kp COMMA      &kp PERIOD      &kp FSLH            &mt RIGHT_SHIFT CAPSLOCK
                                        &kp LEFT_ALT  &kp ESCAPE        &lt 1 TAB  &kp SPACE     &kp ENTER               &lt_backspace 2 BACKSPACE  &kp DEL      &mt RALT NUHS

            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOLUME_UP>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        lower_layer {
            bindings = <
&trans  &trans                          &trans     &kp LBKT              &kp RBKT               &trans                                         &kp LEFT_PARENTHESIS  &kp N7        &kp N8  &kp N9  &kp RIGHT_PARENTHESIS  &trans
&trans  &mt DOUBLE_QUOTES SINGLE_QUOTE  &trans     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE                                      &trans                &kp NUMBER_4  &kp N5  &kp N6  &kp PLUS               &kp CARET
&trans  &kp GRAVE                       &kp UNDER  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN                                  &kp GREATER_THAN      &kp N1        &kp N2  &kp N3  &kp MINUS              &kp STAR
&trans  &trans                          &trans     &trans                &kp PIPE               &kp BACKSLASH  &trans            &kp LC(HOME)  &kp KP_PLUS           &kp N0        &trans  &trans  &trans                 &trans
                                                   &trans                &trans                 &base_layer    &kp UNDERSCORE    &trans        &base_layer           &trans        &trans
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        raise_layer {
            bindings = <
&trans  &kp F1    &kp F2           &kp F3        &kp F4         &kp F5                               &kp F6             &kp F7         &kp F8          &kp F9            &kp F10    &kp DELETE
&trans  &trans    &kp PRINTSCREEN  &kp LG(UP)    &kp LG(TAB)    &trans                               &kp C_AC_UNDO      &kp HOME       &kp UP_ARROW    &kp END           &kp PG_UP  &kp F12
&trans  &kp EXCL  &kp LG(LEFT)     &kp LG(DOWN)  &kp LG(RIGHT)  &kp LESS_THAN                        &kp LG(C_AC_REDO)  &kp LEFT       &kp DOWN_ARROW  &kp RIGHT         &kp PG_DN  &kp TILDE
&trans  &trans    &trans           &trans        &kp PIPE       &kp BACKSLASH  &trans    &kp LC(N0)  &trans             &kp C_AC_BACK  &kp PLUS        &kp C_AC_FORWARD  &kp RBRC   &kp PIPE
                                   &trans        &trans         &base_layer    &trans    &trans      &base_layer        &trans         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp LS(TAB) TAB>,
                <&inc_dec_kp LC(KP_MINUS) RC(KP_PLUS)>;
        };

        alt_layer {
            bindings = <
&trans  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2  &kp F4  &trans                       &rgb_ug RGB_COLOR_HSB(0,0,22)  &rgb_ug RGB_COLOR_HSB(235,70,12)  &rgb_ug RGB_COLOR_HSB(289,70,13)  &rgb_ug RGB_COLOR_HSB(164,73,13)  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG
&trans  &bt BT_DISC 0  &bt BT_DISC 1  &trans        &trans  &trans                       &trans                         &trans                            &trans                            &rgb_ug RGB_SPI                   &rgb_ug RGB_HUI  &rgb_ug RGB_BRI
&trans  &trans         &trans         &trans        &trans  &trans                       &trans                         &trans                            &trans                            &rgb_ug RGB_SPD                   &rgb_ug RGB_HUD  &rgb_ug RGB_BRD
&trans  &trans         &trans         &trans        &trans  &trans  &trans    &kp LC(W)  &trans                         &trans                            &trans                            &trans                            &trans           &trans
                                      &trans        &trans  &trans  &trans    &trans     &trans                         &trans                            &bt BT_CLR
            >;

            sensor-bindings =
                <&inc_dec_kp LS(TAB) TAB>,
                <&inc_dec_kp LS(TAB) TAB>;
        };

        ctrl_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp LC(W)  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans     &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp 0 0>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        shift_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
